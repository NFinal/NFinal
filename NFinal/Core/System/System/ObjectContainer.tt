<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
<#var nullableType=new string[]{"String"};#>
<#var structType=new string[]{"SByte","Byte","Int16","UInt16","Int32","UInt32","Int64","UInt64","Boolean","Char","Decimal","Double","Single","DateTime","DateTimeOffset"};#>
namespace System
{
    public struct ObjectContainer
    {
        public object value;
        public ObjectContainer(object obj)
        {
            this.value = obj;
        }
		public override string ToString()
        {
            return this.value.ToString();
        }
		public static implicit operator string(ObjectContainer obj)
		{
			return obj.value.ToString();
		}
<#for(int i=0;i<structType.Length;i++){#>
		/// <summary>
        /// ExecuteScalar()返回值转换为<#=structType[i]#>
        /// </summary>
        /// <param name="obj">ExecuteScalar()返回值</param>
        /// <returns><#=structType[i]#>类型</returns>
        public static implicit operator <#=structType[i]#>(ObjectContainer obj)
        {
            <#=structType[i]#> result;
            if (obj.value != null && obj.value != DBNull.Value)
            {
                <#=structType[i]#>.TryParse(obj.value.ToString(), out result);
            }
            else
            {
                <#=structType[i]#>.TryParse(null, out result);
            }
            return result;
        }
<#}#>
<#for(int i=0;i<structType.Length;i++){#>
		/// <summary>
        /// ExecuteScalar()返回值转换为<#=structType[i]#>
        /// </summary>
        /// <param name="obj">ExecuteScalar()返回值</param>
        /// <returns><#=structType[i]#>类型</returns>
        public static implicit operator <#=structType[i]#>?(ObjectContainer obj)
        {
            <#=structType[i]#> result;
            if (obj.value != null && obj.value != DBNull.Value)
            {
                <#=structType[i]#>.TryParse(obj.value.ToString(), out result);
				return result;
            }
            else
            {
                return null;
            }
        }
<#}#>
	}
}
