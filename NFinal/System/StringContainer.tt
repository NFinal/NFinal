<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

<#var nullableType=new string[]{"String"};#>
<#var structType=new string[]{"SByte","Byte","Int16","UInt16","Int32","UInt32","Int64","UInt64","Boolean","Char","Decimal","Double","Single","DateTime","DateTimeOffset"};#>
namespace NFinal
{
    public struct StringContainer
    {
        public static readonly StringContainer Empty=new StringContainer();
        public string value;
        internal StringContainer(string value)
        {
            this.value = value;
        }
		public override bool Equals(object obj)
        {
            return base.Equals(obj);
        }
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
		public static bool operator ==(StringContainer container, string str)
        {
            return container.value == str;
        }
        public static bool operator !=(StringContainer container, string str)
        {
            return container.value != str;
        }
<#    for(int i=0;i<structType.Length;i++){#>
        public static implicit operator StringContainer(<#=structType[i]#> obj)
		{
            return new StringContainer(obj.ToString());
		}
<#    }#>
<#    for(int i=0;i<structType.Length;i++){#>
        public static implicit operator StringContainer(<#=structType[i]#>? obj)
		{
            if(obj!=null)
            {
                return new StringContainer(obj.ToString());
            }
			return StringContainer.Empty;
		}
<#    }#>
		public static implicit operator StringContainer(string value)
        {
            return new StringContainer(value);
        }
		public static implicit operator string(StringContainer stringContainar)
		{
			return stringContainar.value;
		}
<#for(int i=0;i<structType.Length;i++){#>
        public static implicit operator <#=structType[i]#>(StringContainer stringContainar)
        {
            <#=structType[i]#> result;
            <#=structType[i]#>.TryParse(stringContainar.value, out result);
            return result;
        }
<#}#>
<#for(int i=0;i<structType.Length;i++){#>
        public static implicit operator <#=structType[i]#>?(StringContainer stringContainar)
        {
            <#=structType[i]#> result;
            if(<#=structType[i]#>.TryParse(stringContainar.value, out result))
			{
				return result;
			}
			else
			{
				return null;
			}
        }
<#}#>
    }
}
