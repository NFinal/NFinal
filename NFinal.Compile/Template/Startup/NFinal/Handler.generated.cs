#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NFinal.Compile.Template.Startup.NFinal
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class Handler : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden
        #line 3 "..\..\Template\Startup\NFinal\Handler.cshtml"
           
    public Compile.Template.Startup.NFinal.HandlerModel Model { get; set; }

        #line default
        #line hidden
        
        public override void Execute()
        {
WriteLiteral("\r\n");

WriteLiteral("//======================================================================\r\n//\r\n// " +
"       Copyright : Zhengzhou Strawberry Computer Technology Co.,LTD.\r\n//        " +
"All rights reserved\r\n//        \r\n//        Application:NFinal MVC framework\r\n// " +
"       Filename :Handler.cs\r\n//        Description :HttpHandler\r\n//\r\n//        c" +
"reated by Lucas at  2015-6-30`\r\n//     \r\n//        WebSite:http://www.nfinal.com" +
"\r\n//\r\n//======================================================================\r\n" +
"using System;\r\n#if (!MicrosoftOwin && !NFinalOwin)\r\nusing System.Web;\r\n#endif\r\nu" +
"sing System.Threading;\r\n\r\nnamespace NFinal\r\n{\r\n#if (!MicrosoftOwin && !NFinalOwi" +
"n)\r\n    /// <summary>\r\n    /// NFinal框架重写的HttpHandler类\r\n    /// </summary>\r\n    " +
"public class Handler : IHttpAsyncHandler\r\n    {\r\n        public bool IsReusable " +
"{ get { return false; } }\r\n\r\n        public Handler()\r\n        {\r\n        }\r\n   " +
"     public IAsyncResult BeginProcessRequest(HttpContext context, AsyncCallback " +
"cb, Object extraData)\r\n        {\r\n\t\t\t//初始化配置\r\n\t\t\tNFinal.Config.ConfigurationMana" +
"ger.Load(context.Server.MapPath(\"/\"));\r\n            AsynchOperation asynch = new" +
" AsynchOperation(cb, context, extraData);\r\n            asynch.StartAsyncWork();\r" +
"\n            return asynch;\r\n        }\r\n\r\n        public void EndProcessRequest(" +
"IAsyncResult result)\r\n        {\r\n        }\r\n\r\n        public void ProcessRequest" +
"(HttpContext context)\r\n        {\r\n            throw new InvalidOperationExceptio" +
"n();\r\n        }\r\n    }\r\n    internal class HandlerFactory : IHttpHandlerFactory\r" +
"\n    {\r\n        private IHttpHandler _handler;\r\n        private Type _handlerTyp" +
"e;\r\n\r\n        internal HandlerFactory(IHttpHandler handler, Type handlerType)\r\n " +
"       {\r\n            this._handler = handler;\r\n            this._handlerType = " +
"handlerType;\r\n        }\r\n\r\n        public IHttpHandler GetHandler(HttpContext co" +
"ntext,\r\n                                    string requestType, string url, stri" +
"ng pathTranslated)\r\n        {\r\n            if (this._handler == null)\r\n         " +
"       this._handler = new Handler();\r\n\r\n            return this._handler;\r\n    " +
"    }\r\n\r\n        public void ReleaseHandler(IHttpHandler handler)\r\n        {\r\n  " +
"          // 一个HttpHandler是否能重用，这里就是一个典型的实现方式\r\n            if (!this._handler.Is" +
"Reusable)\r\n                this._handler = null;\r\n        }\r\n    }\r\n    public c" +
"lass AsynchOperation : IAsyncResult\r\n    {\r\n        private bool _completed;\r\n  " +
"      private Object _state;\r\n        private readonly AsyncCallback _callback;\r" +
"\n        private readonly HttpContext _context;\r\n\r\n        bool IAsyncResult.IsC" +
"ompleted { get { return _completed; } }\r\n        WaitHandle IAsyncResult.AsyncWa" +
"itHandle { get { return null; } }\r\n        Object IAsyncResult.AsyncState { get " +
"{ return _state; } }\r\n        bool IAsyncResult.CompletedSynchronously { get { r" +
"eturn false; } }\r\n\r\n        public AsynchOperation(AsyncCallback callback, HttpC" +
"ontext context, Object state)\r\n        {\r\n            _callback = callback;\r\n   " +
"         _context = context;\r\n            _state = state;\r\n            _complete" +
"d = false;\r\n        }\r\n\r\n        public void StartAsyncWork()\r\n        {\r\n      " +
"      ThreadPool.QueueUserWorkItem(new WaitCallback(StartAsyncTask), null);\r\n   " +
"     }\r\n\r\n        private void StartAsyncTask(Object workItemState)\r\n        {\r\n" +
"\t\t\tif (NFinal.Config.ConfigurationManager.debug == true)\r\n            {\r\n");

            
            #line 113 "..\..\Template\Startup\NFinal\Handler.cshtml"
                
            
            #line default
            #line hidden
            
            #line 113 "..\..\Template\Startup\NFinal\Handler.cshtml"
                  
            
            #line default
            #line hidden
            
            #line 113 "..\..\Template\Startup\NFinal\Handler.cshtml"
             Write(Model.project);

            
            #line default
            #line hidden
            
            #line 113 "..\..\Template\Startup\NFinal\Handler.cshtml"
                                
            
            #line default
            #line hidden
WriteLiteral(".Router.Run(_context, _context.Request.Path);\r\n            }\r\n            else\r\n " +
"           {\r\n                try\r\n                {\r\n");

            
            #line 119 "..\..\Template\Startup\NFinal\Handler.cshtml"
                    
            
            #line default
            #line hidden
            
            #line 119 "..\..\Template\Startup\NFinal\Handler.cshtml"
                      
            
            #line default
            #line hidden
            
            #line 119 "..\..\Template\Startup\NFinal\Handler.cshtml"
                 Write(Model.project);

            
            #line default
            #line hidden
            
            #line 119 "..\..\Template\Startup\NFinal\Handler.cshtml"
                                    
            
            #line default
            #line hidden
WriteLiteral(".Router.Run(_context, _context.Request.Path);\r\n                }\r\n               " +
" catch (Exception e)\r\n                {\r\n                    _context.Response.W" +
"rite(\"错误消息：<br/>\");\r\n                    _context.Response.Write(e.Message);\r\n  " +
"                  _context.Response.Write(\"<br/>\");\r\n                    _contex" +
"t.Response.Write(\"请求时发生错误：<br>\");\r\n                    _context.Response.Write(_" +
"context.Request.FilePath);\r\n                    _context.Response.Write(\"<br/>\")" +
";\r\n                    if (_context.Request.Cookies.Count > 0)\r\n                " +
"    {\r\n                        _context.Response.Write(\"请求时的Cookie:<br>\");\r\n    " +
"                    for (int i = 0; i < _context.Request.Cookies.Count; i++)\r\n  " +
"                      {\r\n                            _context.Response.Write(_co" +
"ntext.Request.Cookies[i].Name);\r\n                            _context.Response.W" +
"rite(\":\");\r\n                            _context.Response.Write(_context.Request" +
".Cookies[i].Values);\r\n                            _context.Response.Write(\"<br/>" +
"\");\r\n                        }\r\n                    }\r\n                    _cont" +
"ext.Response.Write(\"错误跟踪：</br>\");\r\n                    string[] stackTraces = e." +
"StackTrace.Split(\'\\n\');\r\n                    for (int i = 0; i < stackTraces.Len" +
"gth; i++)\r\n                    {\r\n                        _context.Response.Writ" +
"e(stackTraces[i]);\r\n                        _context.Response.Write(\"</br>\");\r\n " +
"                   }\r\n                    _context.Response.End();\r\n            " +
"    }\r\n                //return Task.FromResult(0);.net 4.5;\r\n            }\r\n   " +
"         _completed = true;\r\n            _callback(this);\r\n        }\r\n    }\r\n#en" +
"dif\r\n}");

        }
    }
}
#pragma warning restore 1591
