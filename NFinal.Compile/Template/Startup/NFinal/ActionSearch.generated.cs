#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NFinal.Compile.Template.Startup.NFinal
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class ActionSearch : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden
        #line 3 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
           
    public Compile.Template.Startup.NFinal.ActionSearchModel Model { get; set; }

        #line default
        #line hidden
        
        public override void Execute()
        {
WriteLiteral("\r\n");

WriteLiteral("namespace NFinal\r\n{\r\n    public class ActionSearch\r\n    {\r\n        public static " +
"int Search(string requestedPath)\r\n        {\r\n\t\t\t//重写虚拟目录\r\n");

            
            #line 13 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
			
            
            #line default
            #line hidden
            
            #line 13 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
    foreach(var rewriteDirectory in Model.rewriteData.rewriteDirectoryList){

            
            #line default
            #line hidden
WriteLiteral("\t\t\t");

WriteLiteral("if(requestedPath.StartsWith(\"");

            
            #line 14 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
                             Write(rewriteDirectory.from);

            
            #line default
            #line hidden
WriteLiteral("\"))\r\n");

WriteLiteral("\t\t\t");

WriteLiteral("{\r\n");

WriteLiteral("\t\t\t");

WriteLiteral("\trequestedPath = \"");

            
            #line 16 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
                  Write(rewriteDirectory.to);

            
            #line default
            #line hidden
WriteLiteral("\" + requestedPath.Remove(0,\"");

            
            #line 16 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
                                                                  Write(rewriteDirectory.from);

            
            #line default
            #line hidden
WriteLiteral("\".Length);\r\n");

WriteLiteral("\t\t\t");

WriteLiteral("}\r\n");

            
            #line 18 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
			}

            
            #line default
            #line hidden
WriteLiteral("\t\t\t//重写虚拟路径,也可以把此部分放到find中\r\n\t\t\tswitch (requestedPath)\r\n\t\t\t{\r\n\t\t\t\t//网站图标\r\n\t\t\t\tcase" +
" \"/favicon.ico\": return 0;\r\n");

            
            #line 24 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
				
            
            #line default
            #line hidden
            
            #line 24 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
     foreach(var rewriteFile in Model.rewriteData.rewriteFileList){

            
            #line default
            #line hidden
WriteLiteral("\t\t\t\t");

WriteLiteral("case \"");

            
            #line 25 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
       Write(rewriteFile.from);

            
            #line default
            #line hidden
WriteLiteral("\":requestedPath = \"");

            
            #line 25 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
                                           Write(rewriteFile.to);

            
            #line default
            #line hidden
WriteLiteral("\"; break;\r\n");

            
            #line 26 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
				}

            
            #line default
            #line hidden
WriteLiteral(@"				default: break;
			}
            //获取actionUrl
            string actionUrl = GetActionUrl(requestedPath);
            int find = GetActionId(actionUrl, requestedPath);
            return find;
        }
        /// <summary>
        /// 计算actionUrl
        /// </summary>
        /// <param");

WriteLiteral(" name=\"requestedPath\"");

WriteLiteral("></param>\r\n        /// <returns></returns>\r\n        private static string GetActi" +
"onUrl(string requestedPath)\r\n        {\r\n            //找到最后一个.的位置\r\n            in" +
"t position = requestedPath.LastIndexOf(\'.\');\r\n            bool hasExtension = fa" +
"lse;\r\n            \r\n            //判断是否有后缀（后缀首字母不能为数字，且长度必须大于0小于5）\r\n            i" +
"nt extesionLength = requestedPath.Length - position-1;\r\n            if (extesion" +
"Length > 0 && extesionLength < 5)\r\n            {\r\n                char ch = requ" +
"estedPath[position + 1];\r\n\t\t\t\t//.后面不是数字\r\n                if (ch > \'9\' || ch < \'0" +
"\')\r\n                {\r\n\t\t\t\t\thasExtension = true;\r\n                }\r\n           " +
" }\r\n            \r\n            //指向ActionUrl结尾的位置\r\n            int pointer = 0;\r\n" +
"            string actionUrl = requestedPath;\r\n            bool hasGet = false;\r" +
"\n            //如果有后缀\r\n            if (hasExtension)\r\n            {\r\n\t\t\t\tif(posit" +
"ion>2)\r\n\t\t\t\t{\r\n\t\t\t\t\thasGet = int.TryParse(requestedPath.Substring(position - 2, " +
"2), out pointer);\r\n\t\t\t\t}\r\n            }\r\n            //如果没有后缀\r\n            else\r" +
"\n            {\r\n\t\t\t\tif(requestedPath.Length>2)\r\n\t\t\t\t{\r\n\t\t\t\t\thasGet = int.TryPars" +
"e(requestedPath.Substring(requestedPath.Length - 2, 2), out pointer);\r\n\t\t\t\t}\r\n  " +
"          }\r\n            //取出ActionUrl\r\n            if (hasGet)\r\n            {\r\n" +
"                if (pointer > -1 && pointer < requestedPath.Length)\r\n           " +
"     {\r\n                    actionUrl = requestedPath.Substring(0, pointer + 1);" +
"\r\n                }\r\n            }\r\n            return actionUrl;\r\n        }\r\n  " +
"      /// <summary>\r\n        /// 查询actionUrl\r\n        /// </summary>\r\n        //" +
"/ <param");

WriteLiteral(" name=\"app\"");

WriteLiteral("></param>\r\n        /// <param");

WriteLiteral(" name=\"actionUrl\"");

WriteLiteral("></param>\r\n        /// <param");

WriteLiteral(" name=\"requestedPath\"");

WriteLiteral("></param>\r\n        /// <returns></returns>\r\n        private static int GetActionI" +
"d(string actionUrl, string requestedPath)\r\n        {\r\n            int find = 0;\r" +
"\n            //无参数\r\n            switch (requestedPath)\r\n            {\r\n");

            
            #line 100 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
                
            
            #line default
            #line hidden
            
            #line 100 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
                  int i=1;
				foreach(var fileData in Model.controllerFileDataList){
				foreach(var classData in fileData.ClassDataList){
				foreach(var methodData in classData.MethodDataList){
                if(methodData.isPublic){
					if(methodData.hasParameters==false){

            
            #line default
            #line hidden
WriteLiteral("\t\t\t\t");

WriteLiteral("case \"");

            
            #line 106 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
       Write(methodData.urlParser.actionUrl);

            
            #line default
            #line hidden
WriteLiteral("\":\r\n");

WriteLiteral("                ");

WriteLiteral("    find = ");

            
            #line 107 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
                        Write(i);

            
            #line default
            #line hidden
WriteLiteral("; break;\r\n");

            
            #line 108 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
					}
				i++;
				}}}}
            
            #line default
            #line hidden
WriteLiteral("\r\n                default: find = 0; break;\r\n            }\r\n\t\t\t//有参数\r\n\t\t\tif(find=" +
"=0)\r\n\t\t\t{\r\n\t\t\t\tswitch (actionUrl)\r\n\t\t\t\t{\r\n");

            
            #line 118 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
					
            
            #line default
            #line hidden
            
            #line 118 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
       i=1;
					foreach(var fileData in Model.controllerFileDataList){
					foreach(var classData in fileData.ClassDataList){
					foreach(var methodData in classData.MethodDataList){
					if(methodData.isPublic){
						if(methodData.hasParameters==true){

            
            #line default
            #line hidden
WriteLiteral("\t\t\t\t\t");

WriteLiteral("case \"");

            
            #line 124 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
        Write(methodData.urlParser.actionUrl);

            
            #line default
            #line hidden
WriteLiteral("\":\r\n");

WriteLiteral("\t\t\t\t\t");

WriteLiteral("\tfind = ");

            
            #line 125 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
          Write(i);

            
            #line default
            #line hidden
WriteLiteral("; break;\r\n");

            
            #line 126 "..\..\Template\Startup\NFinal\ActionSearch.cshtml"
						}
					i++;
					}}}}
            
            #line default
            #line hidden
WriteLiteral("\r\n\t\t\t\t\tdefault: find = 0; break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n            return find;\r\n        " +
"}\r\n    }\r\n}");

        }
    }
}
#pragma warning restore 1591
